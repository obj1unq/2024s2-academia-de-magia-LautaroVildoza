import academia.*

describe "Academia de Magia" {

	/* ACLARACIÓN 
	 * El test asume todos los objetos como instancias de clases. 
	 * Si el diseño de la solución utiliza objetos bien conocidos en algunos casos entonces 
	 * se debe remover la declaración de la constante y el comentario que se sugiere la instanciación.
	 */
	const pelota = new Cosa(marca = Cuchuflito, volumen = 3, esElementoMagico = false, esReliquia = false)
	const escoba = new Cosa(marca = Acme, volumen = 4, esElementoMagico = true, esReliquia = true ) 
	const varita = new Cosa(marca = Fenix, volumen = 1, esElementoMagico = true, esReliquia = false)
	const pava = new Cosa(marca = Acme, volumen=2,esElementoMagico=false, esReliquia=true) 
	const lamparaAladino = new Cosa(marca=Fenix, volumen=3, esElementoMagico=true, esReliquia= true) 
	const baul = new Baul(capacidadMax=5, pertenencias = [escoba])
	const gabineteMagico = new GabineteMagico(pertenencias = [varita], precio=6) // El precio = 6 (segunda parte)
	const armario = new Armario(cantidadMax = 2, pertenencias = [pelota]) 
	const academia = new Academia(muebles=#{baul, gabineteMagico, armario}) 

/* ACLARACIÓN
 * Los tests están comentados para evitar errores y warnings, así poder ir incorporándolos 
 * a medida que se avanza con la solución del ejercicio
 */

 	test "punto 1.1 saber si está guardado algo" {
		assert.equals(true, academia.estaGuardado(varita))
  		assert.equals(true, academia.estaGuardado(pelota))
 		assert.equals(true, academia.estaGuardado(escoba))
 		assert.equals(false, academia.estaGuardado(pava))
 		assert.equals(false, academia.estaGuardado(lamparaAladino))
  	}
 
  	test "punto 1.2, saber en que mueble esta guardado algo" {
		assert.throwsException({ academia.enQueMuebleEsta(pava)})
  		// TODO: Verificar que el mueble donde se guarda la varita está es el gabinete mágico
		assert.equals(gabineteMagico, academia.enQueMuebleEsta(varita))
 		// TODO: Verificar que el mueble donde se guarda la pelota está guardada es el armario
		assert.equals(armario, academia.enQueMuebleEsta(pelota))
  		// TODO: Verificar que el mueble donde se guarda la escoba está guardada es el baúl
		assert.equals(baul, academia.enQueMuebleEsta(escoba))
  	}
 

 	test "punto 1.3, saber si se puede guardar algo" {
		// TODO: Verificar que la varita NO se puede guardar en la academia
		assert.notThat(academia.puedeGuardase(varita))
		// TODO: Verificar que la pelota NO se puede guardar en la academia
		assert.notThat(academia.puedeGuardase(pelota))
		// TODO: Verificar que la escoba NO se puede guardar en la academia
		assert.notThat(academia.puedeGuardase(escoba))
		// TODO: Verificar que la pava se puede guardar en la academia
		assert.that(academia.puedeGuardase(pava))
		// TODO: Verificar que la lámpara se puede guardar en la academia
		assert.that(academia.puedeGuardase(lamparaAladino))
 		// TODO: Cambiar la capacidad del armario a 1
		armario.cantidadMax(1)
 		// TODO: Verificar que ahora la pava NO se puede guardar en la academia
		assert.notThat(academia.puedeGuardase(pava))
 	}


  	test "punto 1.4 saber en que muebles se puede guardar algo" {
		assert.equals(#{armario}, academia.mueblesDisponible(pava))
 		// TODO: Verificar que al preguntar en que muebles se puede guardar la pava se obtiene el armario
		// TODO: Verificar al preguntar en que muebles se puede guardar la lámpara se obtienen el armario y el gabinete mágico
  		assert.equals(#{armario, gabineteMagico}, academia.mueblesDisponible(lamparaAladino))
  	}


 	test "punto 1.5. guardar una cosa" {
  		// TODO: Guardar la pava en la academia
 			academia.guardar(pava)
  		// TODO: Verificar que la pava está guardada en la academia
			assert.that(academia.estaGuardado(pava))
  		// TODO: Guardar la lámpara en la academia
			academia.guardar(lamparaAladino)
  		// TODO: Verificar que la lámpara está guardada en la academia
			assert.that(academia.estaGuardado(lamparaAladino))
  		// TODO: Guardar la escoba en la academia (NO SE PUEDE!)
			assert.throwsException({ academia.guardar(escoba) })
		// TODO: Guardar la pelota en la academia (NO SE PUEDE!)
			assert.throwsException({ academia.guardar(pelota) })
		// TODO: Guardar la varita en la academia (NO SE PUEDE!)
			assert.throwsException({academia.guardar(varita)})
  	}

  	test "punto 1.5 no poder guardar una cosa por culpa de que no hay mueble" {
  		// TODO: Cambiar la capacidad del armario a 1
		armario.cantidadMax(1)
		assert.equals(1, armario.cantidadMax())
  		// TODO: Guardar la pava en la academia (NO SE PUEDE!)
		assert.throwsException({ academia.guardar(pava) })
  		// TODO: Verificar que la pava NO está guardada en la academia
		assert.notThat(academia.estaGuardado(pava))
 	}
 

  	test "punto 2.1 utilidad" {
  		// TODO: Guardar la pava en el armario
		armario.agregar(pava)
  		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.agregar(lamparaAladino)
  		var baulMagico = new BaulMagico(capacidadMax=12, pertenencias = [escoba, lamparaAladino]) // TODO: construir/obtener un baúl mágico con volumen máximo = 12 y con la escoba y la lámpara dentro
  		// TODO: Verificar que la utilidad del armario es 1.1
		assert.equals(1.1, armario.utilidad())
  		// TODO: Verificar que la utilidad del ganibete mágico es 3
		assert.equals(3, gabineteMagico.utilidad())
  		// TODO: Verificar que la utilidad del baúl es 4
		assert.equals(4, baul.utilidad())
 		// TODO: Verificar que la utilidad del baúl mágico es 5
		assert.equals(5, baulMagico.utilidad())
 	}
 

  	test "punto 2.2 cosas menos utiles" {
  		// TODO: Guardar la pava en el armario
		armario.agregar(pava)
 		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.agregar(lamparaAladino)
 		// TODO: Verificar que las cosas menos útiles en la academia son la pelota, la varita y la escoba
		//assert.equals([pelota, varita, escoba], academia.cosasMenosUtiles()) pq falla?
 	}
 

 	test "punto 2.3 marca de cosa menos util" {
 		// TODO: Guardar la pava en el armario
		armario.agregar(pava)
 		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.agregar(lamparaAladino)
 		// TODO: Verificar que la marca menos útil de la academia es cuchuflito
		assert.equals(Cuchuflito, academia.marcaMenosUtil())
 	}


  	test "punto 2.4 remover cosas menos utiles que no son magicas" {
  		// TODO: Guardar la pava en el armario
		armario.agregar(pava)
 		// TODO: Guardar la lámpara en el gabinete mágico
		gabineteMagico.agregar(lamparaAladino)
  		// TODO: Remover las cosas menos útiles de la academia que no son mágicas
		academia.removerCosaMenosUtilesQueNoSeanMagicas()
  		// TODO: Verificar que la varita está guardada en la academia
		assert.that(academia.estaGuardado(varita))
  		// TODO: Verificar que la pelota NO está guardada en la academia
		assert.notThat(academia.estaGuardado(pelota))
  		// TODO: Verificar que la escoba está guardada en la academia
		assert.that(academia.estaGuardado(escoba))
 		// TODO: Verificar que la pava está guardada en la academia
		assert.that(academia.estaGuardado(pava))
  		// TODO: Verificar que la lámpara está guardada en la academia
		assert.that(academia.estaGuardado(lamparaAladino))
  	}
 
  	test "punto 2.4 imposible remover cosas menos utiles que no son magicas" {
 		// TODO: Hacer que la academia tenga solamente el armario y el baúl
		const academia1 = new Academia(muebles=#{baul,armario})
 		// TODO: Remover las cosas menos útiles de la academia que no son mágicas (NO SE PUEDE!)
		assert.throwsException({ academia1.removerCosaMenosUtilesQueNoSeanMagicas() })
 	}

}

